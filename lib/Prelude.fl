module Prelude

# ----------------------------------------
# Binding primitive operations
# ----------------------------------------

fun (+) x y = flimsy_prim_int_add (x,y)
fun (-) x y = flimsy_prim_int_sub (x,y)
fun (*) x y = flimsy_prim_int_mul (x,y)
fun (/) x y = flimsy_prim_int_div (x,y)

fun (.+) x y = flimsy_prim_double_add (x,y)
fun (.-) x y = flimsy_prim_double_sub (x,y)
fun (.*) x y = flimsy_prim_double_mul (x,y)
fun (./) x y = flimsy_prim_double_div (x,y)

fun (::) x xs = flimsy_prim_list_cons (x,xs)

fun getline   = flimsy_prim_io_getline ()
fun putstr  x = flimsy_prim_io_putstr x
fun putline x = flimsy_prim_io_putline x
fun return  x = flimsy_prim_io_return x

fun show x = flimsy_prim_show x

fun (==) x y = flimsy_prim_eq (x,y)

# ----------------------------------------
# IO operations
# ----------------------------------------

fun print x     = putline (show x)
fun print_io io = do { x <- io; print x }

# ----------------------------------------
# Tuple operations
# ----------------------------------------

fun fst tup = case tup of (x,_) => x
fun snd tup = case tup of (_,y) => y

fun fst3 tup = case tup of (x,_,_) => x
fun snd3 tup = case tup of (_,y,_) => y
fun thd3 tup = case tup of (_,_,z) => z

# ----------------------------------------
# List operations
# ----------------------------------------

fun map f l =
  case l of
  | []     => []
  | [x|xs] => f x :: map f xs

fun take n l =
  case (n, l) of
  | (0, _)      => []
  | (_, [])     => []
  | (n, [x|xs]) => x :: take (n - 1) xs

fun zipWith f xs ys =
  case (xs, ys) of
  | ([],      _)       => []
  | (_,       [])      => []
  | ([x|xs'], [y|ys']) => f x y :: zipWith f xs' ys'

fun zip xs ys =
  zipWith (fn x y => (x, y)) xs ys

fun filter p l =
  case l of
  | [] => []
  | [x|xs] => if p x
              then x :: filter p xs
              else filter p xs
