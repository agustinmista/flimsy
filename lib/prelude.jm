val pi = 3.14

fun fst tup = case tup of (x,_) => x
fun snd tup = case tup of (_,y) => y

fun (+) x y = prim_int_add__ (x,y)
fun (-) x y = prim_int_sub__ (x,y)
fun (*) x y = prim_int_mul__ (x,y)
fun (/) x y = prim_int_div__ (x,y)

fun (==) x y = prim_eq__ (x,y)

fun getline x = prim_getline__ x
fun putline x = prim_putline__ x

fun (::) x xs = prim_list_cons__ (x,xs)

fun fact n =
  case n of
  | 0 => 1
  | n => n * fact (n - 1)

fun fact' n =
  if n == 0
  then 1
  else n * fact (n - 1)

val bottom = fix (fn x => x)

fun take n l =
  case (n, l) of
  | (0, _)      => []
  | (_, [])     => []
  | (n, [x|xs]) => x :: take (n - 1) xs
