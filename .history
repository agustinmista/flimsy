getLine "ghci> "
getLine "ghci> "
getLine "hey> "
getLine "ghci> "
ls
getLine()
getLine()
getLine
ls
:l lib/prelude.lang 
;s
let val x = getLine (); val y = getLine () in (y,x) end
let val x = getLine (); val y = getLine () in (x, y) end
let val x = getLine (); val y = getLine () in (y, x) end
let val x = getLine (); val y = getLine () in (x,y) end
let x = getLine (); y = getLine () in (x,y) end
getLine ()
getLine 
:browse 
:l lib/prelude.lang 
:l lib/prelude.lang 
:l lib/prelude.lang 
fst (10,20)
fact 5
mul 2 3
:l lib/prelude.lang 
mul 2 3
fact 5
:l lib/prelude.lang 
x
val x  = 10
10
fact 5
:l lib/prelude.lang 
:browse 
fact 10
:load lib/prelude.lang 
:! vim lib/prelude.lang 
:! cp ../lang/prelude.lang lib/
:! ls lib/
:! ls
:shell ls
:! ls -la
:! ls
:!
:!
:! ls
:!ls
:!ls
ls
fact 50
fact 20
fact 10
:l ../lang/prelude.lang 
fact 10
fact 200
fact 20
fact 10
:l ../lang/prelude.lang 
:l ../lang/prelude.lang 
:l ../lang/prelude.lang 
:l ../lang/prelude.lang 
fun f x = x x
fun f x = \
fun f x = 1e2
fun f x = x
