:l lib/deps.fl 
:l lib/deps.fl 
:e lib/deps.fl 
:e lib/deps.fl 
:l lib/deps.fl 
:l lib/wrong.fl 
fib 30
fib 30
fib 20
fib 100
fib 10
:l lib/prelude.fl 
:l lib/do.fl 
foo 10 20
foo
:browse lib/test.fl 
:l lib/test.fl 
:l
:reload
:! cat flimsy.cabal 
:! ls
:t return
:t return
:t retunr
return
fact 10
getLine 
putLine "aaa"
take 10 nats
val nats = 0 :: map (fn x => x + 1) nats 
take 10 nats
getLine
putLine "aaa"
putLine "aaa"
main
:t main
main
print "aaa"
print "aaa"
print "" 
print ""foo""
print "foo"
print (return 10)
main
main
print (return 10)
print_io (return 10)
return 10
print_io (return 10)
return 10
print (return 10)
main
main
main
print_io (return 10)
print_io (return 10)
:t print_io 
print_io (return 10)
print (putLine  "10")
print_io (putLine  "10")
print (putLine  "10")
putLine  "10"
putStrLn "10"
putStrLn "10"
"foo"
10
10
putLine "aaa"
print_io (return ())
putLine "aaa"
print_io (return ())
print_io (return ())
print_io (return ())
print ()
print "1,2,3"
print_io (putLine "aaa")
print_io (putLine "aaa")
print_io (putLine "aaa")
print_io (putLine  "aaa")
putLine  "aaa"
putline "aaa"
:t fn io => print_io io 
:t fun io => print_io io 
:t print_io
:type do { putLine "aaa" }
:type  do { putLine "aaa" }
:type   do { print_io (do { putLine "aaa" })}
:echo do { print_io (do { putLine "aaa" })}
do { print_io (do { putLine "aaa" })}
:t do { print_io (do { putLine "aaa" })}
:t do { putLine "aaa" }
do { putLine "aaa" }
10
10
do { putLine "aaa" }
putLine "aaa"
:t (.)
:t .
fun (.) f g = fn x => f (g x)  
main
