main
odd 30
:browse OddEven
:browse 
:l fl/OddEven.fl 
even 30
even 30
odd 30
foo 
bar
:br OddEven
:l fl/OddEven.fl 
bar
odd 10
even 10
foo
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
bar
odd 30
even 30
:l fl/OddEven.fl 
even 30
odd 30
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
odd 10
bar
foo
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
bar
:t bar
:t even 
:t :t even
:t odd
odd 2
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:l fl/OddEven.fl 
:t main
:browse Do
:l fl/Do.fl 
:browse A Prelude
:browse A
:l fl/B.fl 
foo
:l fl/A.fl 
take 10 nats
val nats = 0 :: map (fn x => x + 1) nats 
:load fl/B.fl 
:browse A
:load fl/A.fl 
:browse Prelude
10
nats
val nats = 0 :: map (fn x => x + 1) nats 
nats
:echo take 10 nats
take 10 nats
take
:t nats
val nats = 0 :: map (fn x => x + 1) nats 
putLine "aaa"
10
:browse Prelude
:browse Prelude
:browse Prelude
:browse Prelude
:browse Wrong
:l fl/Wrong.fl 
:browse Wrong
:l fl/Wrong.fl 
z
:browse Wrong
:l fl/Wrong.fl 
:browse Wrong
:l fl/Wrong.fl 
snd (10, 20)
putLine "aaa"
:info
:t fn x => x
:t snd (10, 20)
:t snd
1
take
:browse 
:browse 
:browse 
:info
