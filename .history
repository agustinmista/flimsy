case ones of | [x,y|xs] => [x,y]
case (1,ones) of | (x, y) => 5
val ones = 1 :: ones
case (1,ones) of | (x, y) => 5
val ones = 1 :: ones
bad
case (1,bad) of | (x, y) => 5
case (1,bad) of | (x, y) => x
val bad = bad
case (1,bad) of | (x, y) => x
case (1,bad) of | (x, y) => x
val bad = bad
case (1,bad) of | (x, y) => x
case (1,bad) of | (x, y) => x
bad
val bad = bad
bad
val bad = fn x => x
case (1,ones) of | (x, y) => x
case (1,ones) of | (x, y) = x
val ones = 1 :: ones
case (1,2) of | (x, 10) => (x, 10)
case (1,2) of | (x, 10) => (y, 10)
case (1,2) of | (x, 10) => (y, x)
case (1,2) of | (x, y) => (y, x)
(1,2)
(1,2)
(1,2)
case (1, ones) of | x => 4
case ones of | x => 4
:t ones
val ones = 1 :: ones
ones
fst (1, f)
f
:t f
f 1
:t f
fun f x = f x
putline "123"
:t let val x = y; val y = 3; in x + y end
1 :: 2 :: []
1 :: 2 :: []
:echo case 5 of y => y | _ => getline
:echo case 5 of y => y | _ => 4
:t case 5 of y => y | _ => 4
:t case 5 of y => y | _ => x
:t (fn x => case x of y => y | _ => x) getline
:t (fn x => case x of y => y) getline
:echo fun f io = do { x <- io; putline x }
:echo fun f io = do { x <- io; putline x }
:t f
:t fun f io = do { x <- io; putline x }
fun f io = do { x <- io; putline x }
:t let val x = 2; val y = 3; in x + y end
let val x = 2; val y = 3; in x + y end
let val x = 2; val y = 3; in x + y
take 10 ones
:t ones
:t val ones = 1 :: ones
val ones = 1 :: ones
val ones = 1 :: ones
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => case x of y => y) getline
:t (fn x => x) getline
do {getline} + do {getline}
do {bar} + do {getline}
1 + do {getline}
1 + do {getline} 2
1 + do {getline} 2
1 + do {getline}
1 + 2 +3
1 + 2
:t do { x <- return (putline "x"); x } 
:t do { x <- putline "x"; return x } 
:t do { x <- putline "x"; return x } 
:t do { x <- putline "x"; x } 
:t return getline
:t getline 
:t do { get <- return getline; x <- get; put <- return putline; put x; putline x }
do { get <- return getline; x <- get; put <- return putline; put x; putline x }
:t getline 
:t take 4 [1,2,3,4,5,6]
:t getline 
:t take 4 [1,2,3,4,5,6]
take 4 [1,2,3,4,5,6] : t
take 4 [1,2,3,4,5,6]
take 4 [1,2,3,4,5,6]
fact 10
do { get <- return getline; x <- get; put <- return putline; put x; putline x }
return 10
snd (return 10)
snd (return 10)
return 10
