:! vim lib/prelude.jm 
:! vim lib/prelude.jm 
:! ls
:! ghci
:load 
:load 
:load 
:l
fun f x = 1 + false
fun f 2 = 10
fun f x = 10
fun f x = 10
fun f x = 10
val f x = 10
:t f
f
val f = 10
val true = 10
fact 10
:browse lib/prelude.jm 
:browse lib/deps.jm
:browse lib/deps.jm 
:browse 
:l lib/deps.jm 
:browse 
:browse 
:l lib/deps.jm 
:browse 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
:l lib/deps.jm 
qux 
:l lib/deps.jm 
fact 5
:t fact
:info fst
val id = (fn x => x) : Int -> a
val id = fn x => x : Int -> a
:t id
val id = fn x => x
sig id : Int -> a
:t id'
id'
val id' = fn x => x
:t id
val id = fn x => x
sig id : Int -> Int
:t (fn x => x) : Int -> Int
(fn x => x) : Int -> Int
fn x => x
id false
id False
:t id
sig id : Int -> Int
:t id
fun id x = x
sig id : Int -> Int
:info id
:t id
sig id : Int -> Int
:t id
fun id x = x
fn
asdadsdad
1 + false
1 + false
1 + false
1 + false
:info fact
:t take 4 [1,2,3,4,5]
take 4 [1,2,3,4,5]
:info x y
val y = 20
:info x
val x = 10
:info x
val x = 10
x = 10
x
:info x
x
val x = 5
x
val x = fn y => y
x
x
